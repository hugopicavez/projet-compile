
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 11 23:22:03 CEST 2017
//----------------------------------------------------

package fr.esisar.compilation.syntaxe;

import java_cup.runtime.*;
import fr.esisar.compilation.global.src.*;
import java.io.InputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 11 23:22:03 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\010\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\006\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\010\000\002\012\005\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\011\003\000\002\004\005\000\002\004\004" +
    "\000\002\005\003\000\002\005\005\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\011\000\002" +
    "\005\006\000\002\005\006\000\002\005\003\000\002\015" +
    "\007\000\002\015\007\000\002\016\005\000\002\016\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\030\005\001\002\000\004\002\201\001" +
    "\002\000\006\004\ufffe\012\ufffe\001\002\000\006\004\010" +
    "\012\011\001\002\000\004\055\200\001\002\000\066\010" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\022\ufff1\027\ufff1\032\ufff1" +
    "\033\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\001" +
    "\002\000\022\004\010\020\044\021\051\023\054\025\047" +
    "\031\042\034\043\035\053\001\002\000\006\053\ufffb\054" +
    "\ufffb\001\002\000\006\053\014\054\015\001\002\000\014" +
    "\004\010\005\026\011\017\044\022\045\027\001\002\000" +
    "\004\004\010\001\002\000\006\053\ufffc\054\ufffc\001\002" +
    "\000\004\056\035\001\002\000\010\052\ufff4\055\ufff4\057" +
    "\ufff4\001\002\000\004\055\ufff9\001\002\000\006\004\010" +
    "\005\026\001\002\000\004\052\032\001\002\000\006\052" +
    "\ufff2\055\ufffa\001\002\000\004\055\ufffd\001\002\000\010" +
    "\052\ufff3\055\ufff3\057\ufff3\001\002\000\006\004\010\005" +
    "\026\001\002\000\010\052\ufff5\055\ufff5\057\ufff5\001\002" +
    "\000\010\052\ufff2\055\ufff2\057\ufff2\001\002\000\012\004" +
    "\010\005\026\044\022\045\027\001\002\000\006\055\ufff7" +
    "\057\ufff7\001\002\000\010\052\ufff6\055\ufff6\057\ufff6\001" +
    "\002\000\012\004\010\005\026\044\022\045\027\001\002" +
    "\000\004\057\037\001\002\000\004\026\040\001\002\000" +
    "\014\004\010\005\026\011\017\044\022\045\027\001\002" +
    "\000\004\055\ufff8\001\002\000\004\050\175\001\002\000" +
    "\022\004\010\005\066\006\064\007\057\024\067\044\062" +
    "\045\070\050\056\001\002\000\004\004\010\001\002\000" +
    "\024\004\010\017\154\020\044\021\051\023\054\025\047" +
    "\031\042\034\043\035\053\001\002\000\006\056\133\060" +
    "\152\001\002\000\004\055\uffee\001\002\000\004\055\151" +
    "\001\002\000\022\004\010\005\066\006\064\007\057\024" +
    "\067\044\062\045\070\050\056\001\002\000\062\010\uffca" +
    "\013\uffca\014\uffca\015\uffca\022\uffca\027\uffca\032\uffca\033" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\051\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\001\002\000\004\050\055" +
    "\001\002\000\004\055\uffe6\001\002\000\022\004\010\005" +
    "\066\006\064\007\057\024\067\044\062\045\070\050\056" +
    "\001\002\000\022\004\010\005\066\006\064\007\057\024" +
    "\067\044\062\045\070\050\056\001\002\000\056\010\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\022\uffcd\027\uffcd\032\uffcd\033" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\054\uffcd\055" +
    "\uffcd\057\uffcd\001\002\000\042\010\076\013\103\022\100" +
    "\027\112\036\104\037\113\040\102\041\105\042\110\043" +
    "\111\044\101\045\107\046\077\047\106\051\uffe2\054\uffe2" +
    "\001\002\000\060\010\uffcc\013\uffcc\014\uffcc\015\uffcc\022" +
    "\uffcc\027\uffcc\032\uffcc\033\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\051\uffcc\054\uffcc\055\uffcc\056\133\057\uffcc\001\002" +
    "\000\014\004\010\005\066\006\064\007\057\050\056\001" +
    "\002\000\056\010\uffe1\013\uffe1\014\uffe1\015\uffe1\022\uffe1" +
    "\027\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\051\uffe1\054\uffe1\055\uffe1\057\uffe1\001\002\000\056\010" +
    "\uffce\013\uffce\014\uffce\015\uffce\022\uffce\027\uffce\032\uffce" +
    "\033\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\054\uffce" +
    "\055\uffce\057\uffce\001\002\000\006\051\073\054\074\001" +
    "\002\000\056\010\uffcf\013\uffcf\014\uffcf\015\uffcf\022\uffcf" +
    "\027\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\054\uffcf\055\uffcf\057\uffcf\001\002\000\014\004" +
    "\010\005\066\006\064\007\057\050\056\001\002\000\014" +
    "\004\010\005\066\006\064\007\057\050\056\001\002\000" +
    "\056\010\uffd1\013\uffd1\014\uffd1\015\uffd1\022\uffd1\027\uffd1" +
    "\032\uffd1\033\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1" +
    "\054\uffd1\055\uffd1\057\uffd1\001\002\000\056\010\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\022\uffd0\027\uffd0\032\uffd0\033\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\054\uffd0\055\uffd0" +
    "\057\uffd0\001\002\000\004\055\uffe8\001\002\000\022\004" +
    "\010\005\066\006\064\007\057\024\067\044\062\045\070" +
    "\050\056\001\002\000\042\010\076\013\103\022\100\027" +
    "\112\036\104\037\113\040\102\041\105\042\110\043\111" +
    "\044\101\045\107\046\077\047\106\051\uffe3\054\uffe3\001" +
    "\002\000\022\004\010\005\066\006\064\007\057\024\067" +
    "\044\062\045\070\050\056\001\002\000\022\004\010\005" +
    "\066\006\064\007\057\024\067\044\062\045\070\050\056" +
    "\001\002\000\022\004\010\005\066\006\064\007\057\024" +
    "\067\044\062\045\070\050\056\001\002\000\022\004\010" +
    "\005\066\006\064\007\057\024\067\044\062\045\070\050" +
    "\056\001\002\000\022\004\010\005\066\006\064\007\057" +
    "\024\067\044\062\045\070\050\056\001\002\000\022\004" +
    "\010\005\066\006\064\007\057\024\067\044\062\045\070" +
    "\050\056\001\002\000\022\004\010\005\066\006\064\007" +
    "\057\024\067\044\062\045\070\050\056\001\002\000\022" +
    "\004\010\005\066\006\064\007\057\024\067\044\062\045" +
    "\070\050\056\001\002\000\022\004\010\005\066\006\064" +
    "\007\057\024\067\044\062\045\070\050\056\001\002\000" +
    "\022\004\010\005\066\006\064\007\057\024\067\044\062" +
    "\045\070\050\056\001\002\000\022\004\010\005\066\006" +
    "\064\007\057\024\067\044\062\045\070\050\056\001\002" +
    "\000\022\004\010\005\066\006\064\007\057\024\067\044" +
    "\062\045\070\050\056\001\002\000\022\004\010\005\066" +
    "\006\064\007\057\024\067\044\062\045\070\050\056\001" +
    "\002\000\022\004\010\005\066\006\064\007\057\024\067" +
    "\044\062\045\070\050\056\001\002\000\042\010\076\013" +
    "\103\014\uffd9\015\uffd9\022\100\027\112\032\uffd9\033\uffd9" +
    "\044\101\045\107\046\077\047\106\051\uffd9\054\uffd9\055" +
    "\uffd9\057\uffd9\001\002\000\056\010\076\013\103\014\uffdf" +
    "\015\uffdf\022\100\027\uffdf\032\uffdf\033\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\077\047\106\051\uffdf\054\uffdf\055\uffdf\057\uffdf\001" +
    "\002\000\042\010\076\013\103\014\uffdc\015\uffdc\022\100" +
    "\027\112\032\uffdc\033\uffdc\044\101\045\107\046\077\047" +
    "\106\051\uffdc\054\uffdc\055\uffdc\057\uffdc\001\002\000\042" +
    "\010\076\013\103\014\uffdd\015\uffdd\022\100\027\112\032" +
    "\uffdd\033\uffdd\044\101\045\107\046\077\047\106\051\uffdd" +
    "\054\uffdd\055\uffdd\057\uffdd\001\002\000\056\010\076\013" +
    "\103\014\uffd7\015\uffd7\022\100\027\uffd7\032\uffd7\033\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\077\047\106\051\uffd7\054\uffd7\055\uffd7" +
    "\057\uffd7\001\002\000\056\010\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\022\uffd5\027\uffd5\032\uffd5\033\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\054\uffd5\055\uffd5\057\uffd5\001\002" +
    "\000\042\010\076\013\103\014\uffdb\015\uffdb\022\100\027" +
    "\112\032\uffdb\033\uffdb\044\101\045\107\046\077\047\106" +
    "\051\uffdb\054\uffdb\055\uffdb\057\uffdb\001\002\000\042\010" +
    "\076\013\103\014\uffda\015\uffda\022\100\027\112\032\uffda" +
    "\033\uffda\044\101\045\107\046\077\047\106\051\uffda\054" +
    "\uffda\055\uffda\057\uffda\001\002\000\056\010\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\022\uffd3\027\uffd3\032\uffd3\033\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\051\uffd3\054\uffd3\055\uffd3\057" +
    "\uffd3\001\002\000\042\010\076\013\103\014\uffde\015\uffde" +
    "\022\100\027\112\032\uffde\033\uffde\044\101\045\107\046" +
    "\077\047\106\051\uffde\054\uffde\055\uffde\057\uffde\001\002" +
    "\000\056\010\076\013\103\014\uffd8\015\uffd8\022\100\027" +
    "\uffd8\032\uffd8\033\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\077\047\106\051" +
    "\uffd8\054\uffd8\055\uffd8\057\uffd8\001\002\000\056\010\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\022\uffd4\027\uffd4\032\uffd4\033" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\054\uffd4\055" +
    "\uffd4\057\uffd4\001\002\000\056\010\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\022\uffd6\027\uffd6\032\uffd6\033\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\051\uffd6\054\uffd6\055\uffd6\057\uffd6\001" +
    "\002\000\056\010\uffe0\013\uffe0\014\uffe0\015\uffe0\022\uffe0" +
    "\027\uffe0\032\uffe0\033\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\051\uffe0\054\uffe0\055\uffe0\057\uffe0\001\002\000\056\010" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\022\uffd2\027\uffd2\032\uffd2" +
    "\033\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\054\uffd2" +
    "\055\uffd2\057\uffd2\001\002\000\022\004\010\005\066\006" +
    "\064\007\057\024\067\044\062\045\070\050\056\001\002" +
    "\000\040\010\076\013\103\022\100\027\112\036\104\037" +
    "\113\040\102\041\105\042\110\043\111\044\101\045\107" +
    "\046\077\047\106\057\135\001\002\000\062\010\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\022\uffc9\027\uffc9\032\uffc9\033\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\001\002\000\040\010\076\013" +
    "\103\022\100\027\112\036\104\037\113\040\102\041\105" +
    "\042\110\043\111\044\101\045\107\046\077\047\106\051" +
    "\137\001\002\000\056\010\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\022\uffcb\027\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\051\uffcb\054\uffcb\055\uffcb\057\uffcb\001\002\000" +
    "\040\010\076\013\103\022\100\027\112\032\141\036\104" +
    "\037\113\040\102\041\105\042\110\043\111\044\101\045" +
    "\107\046\077\047\106\001\002\000\022\004\010\020\044" +
    "\021\051\023\054\025\047\031\042\034\043\035\053\001" +
    "\002\000\026\004\010\016\144\017\145\020\044\021\051" +
    "\023\054\025\047\031\042\034\043\035\053\001\002\000" +
    "\004\055\150\001\002\000\022\004\010\020\044\021\051" +
    "\023\054\025\047\031\042\034\043\035\053\001\002\000" +
    "\004\055\uffea\001\002\000\024\004\010\017\147\020\044" +
    "\021\051\023\054\025\047\031\042\034\043\035\053\001" +
    "\002\000\004\055\uffe9\001\002\000\026\004\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\023\ufff0\025\ufff0\031\ufff0\034" +
    "\ufff0\035\ufff0\001\002\000\026\004\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\023\uffef\025\uffef\031\uffef\034\uffef\035" +
    "\uffef\001\002\000\022\004\010\005\066\006\064\007\057" +
    "\024\067\044\062\045\070\050\056\001\002\000\040\010" +
    "\076\013\103\022\100\027\112\036\104\037\113\040\102" +
    "\041\105\042\110\043\111\044\101\045\107\046\077\047" +
    "\106\055\uffed\001\002\000\004\061\155\001\002\000\004" +
    "\002\001\001\002\000\004\014\166\001\002\000\004\060" +
    "\160\001\002\000\022\004\010\005\066\006\064\007\057" +
    "\024\067\044\062\045\070\050\056\001\002\000\042\010" +
    "\076\013\103\015\163\022\100\027\112\033\162\036\104" +
    "\037\113\040\102\041\105\042\110\043\111\044\101\045" +
    "\107\046\077\047\106\001\002\000\022\004\010\005\066" +
    "\006\064\007\057\024\067\044\062\045\070\050\056\001" +
    "\002\000\022\004\010\005\066\006\064\007\057\024\067" +
    "\044\062\045\070\050\056\001\002\000\040\010\076\013" +
    "\103\014\uffe4\022\100\027\112\036\104\037\113\040\102" +
    "\041\105\042\110\043\111\044\101\045\107\046\077\047" +
    "\106\001\002\000\040\010\076\013\103\014\uffe5\022\100" +
    "\027\112\036\104\037\113\040\102\041\105\042\110\043" +
    "\111\044\101\045\107\046\077\047\106\001\002\000\022" +
    "\004\010\020\044\021\051\023\054\025\047\031\042\034" +
    "\043\035\053\001\002\000\024\004\010\017\170\020\044" +
    "\021\051\023\054\025\047\031\042\034\043\035\053\001" +
    "\002\000\004\055\uffec\001\002\000\040\010\076\013\103" +
    "\014\172\022\100\027\112\036\104\037\113\040\102\041" +
    "\105\042\110\043\111\044\101\045\107\046\077\047\106" +
    "\001\002\000\022\004\010\020\044\021\051\023\054\025" +
    "\047\031\042\034\043\035\053\001\002\000\024\004\010" +
    "\017\174\020\044\021\051\023\054\025\047\031\042\034" +
    "\043\035\053\001\002\000\004\055\uffeb\001\002\000\004" +
    "\004\010\001\002\000\006\051\177\056\133\001\002\000" +
    "\004\055\uffe7\001\002\000\006\004\uffff\012\uffff\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\010\006\006\007\012\011\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\044\005\047\011\051\021\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\024\011\023\012\020\013" +
    "\022\014\017\001\001\000\004\011\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\030\014\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\030\014\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\030\013\032\014\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\030\012\035" +
    "\013\022\014\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\040\011\023\012\020\013\022\014\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\051\017\170\020\062\021\060\001\001\000\006\011\156" +
    "\015\155\001\001\000\010\005\142\011\051\021\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\051\017\137\020\062\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\051\016\064\017\057\020\062\021\060\001\001\000" +
    "\012\011\051\017\135\020\062\021\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\051\020\131\021\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\051\020\071\021\060\001\001\000\010\011\051\020\070" +
    "\021\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\051\017\074\020\062\021\060" +
    "\001\001\000\002\001\001\000\012\011\051\017\130\020" +
    "\062\021\060\001\001\000\012\011\051\017\127\020\062" +
    "\021\060\001\001\000\012\011\051\017\126\020\062\021" +
    "\060\001\001\000\012\011\051\017\125\020\062\021\060" +
    "\001\001\000\012\011\051\017\124\020\062\021\060\001" +
    "\001\000\012\011\051\017\123\020\062\021\060\001\001" +
    "\000\012\011\051\017\122\020\062\021\060\001\001\000" +
    "\012\011\051\017\121\020\062\021\060\001\001\000\012" +
    "\011\051\017\120\020\062\021\060\001\001\000\012\011" +
    "\051\017\117\020\062\021\060\001\001\000\012\011\051" +
    "\017\116\020\062\021\060\001\001\000\012\011\051\017" +
    "\115\020\062\021\060\001\001\000\012\011\051\017\114" +
    "\020\062\021\060\001\001\000\012\011\051\017\113\020" +
    "\062\021\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\051\017\133\020\062\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\141\005\047\011" +
    "\051\021\045\001\001\000\010\005\142\011\051\021\045" +
    "\001\001\000\002\001\001\000\012\004\145\005\047\011" +
    "\051\021\045\001\001\000\002\001\001\000\010\005\142" +
    "\011\051\021\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\051\017\152\020\062" +
    "\021\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\051\017\160\020\062\021\060\001\001\000\002\001" +
    "\001\000\012\011\051\017\164\020\062\021\060\001\001" +
    "\000\012\011\051\017\163\020\062\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\166\005\047" +
    "\011\051\021\045\001\001\000\010\005\142\011\051\021" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\172\005\047\011\051\021\045\001\001\000\010\005" +
    "\142\011\051\021\045\001\001\000\002\001\001\000\006" +
    "\011\051\021\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   /**
    * Réalise l'analyse syntaxique du fichier passé en argument (ou de 
    * l'entrée standard si args est un tableau vide) et retourne 
    * l'abstrait correspondant.
    * Lève l'exception ErreurLexicale en cas d'erreur lexicale, et 
    * ErreurSyntaxe en cas d'erreur de syntaxe.
    */
   public static Arbre analyseSyntaxique(String[] args) 
         throws Exception, ErreurLexicale, ErreurSyntaxe {

      // On récupère le fichier à analyser
      InputStream fichierCas = ArgsFichier.ouvrir(args);

      // Création de l'analyseur lexical
      Lexical analyseurLex = new Lexical(fichierCas);

      // Création de l'analyseur syntaxique
      parser analyseurSynt = new parser(analyseurLex);

      // Appel de l'analyseur syntaxique et récupération de l'arbre résultat
      Object result = analyseurSynt.parse().value;
      Arbre arbre = (Arbre) result;
      
      // On retourne l'arbre abstrait construit
      return arbre;
   }

   /**
    * Affiche un message d'erreur en cas d'erreur de syntaxe.
    */
   public void syntax_error(Symbol cur_token) {
      // Affichage du message d'erreur, avec le numéro de ligne 
      System.out.println("Erreur de syntaxe ... ligne " + numLigne()) ;
   }

   /**
    * Méthode appelée en cas d'erreur de syntaxe.
    */
   public void unrecovered_syntax_error(Symbol cur_token)
         throws ErreurSyntaxe {
      throw new ErreurSyntaxe();
   }

   /**
    * Retourne le numéro de ligne courant.
    */
   public int numLigne() {
      // On récupère l'analyseur lexical
      Lexical anaLex = (Lexical) getScanner();
      return anaLex.numLigne();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // place ::= place CROCH_OUVR exp CROCH_FERM 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("place",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // place ::= idf 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("place",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // facteur ::= PAR_OUVR exp PAR_FERM 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // facteur ::= place 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // facteur ::= CONST_CHAINE 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // facteur ::= CONST_REEL 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // facteur ::= CONST_ENT 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= NOT facteur 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= MOINS facteur 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= PLUS facteur 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp DIV exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MOD exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp DIV_REEL exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MULT exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MOINS exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp PLUS exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp SUP exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp INF exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp DIFF exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp SUP_EGAL exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp INF_EGAL exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp EGAL exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp OR exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp AND exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= facteur 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // liste_exp ::= exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // liste_exp ::= liste_exp VIRGULE exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pas ::= idf AFFECT exp DOWNTO exp 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pas ::= idf AFFECT exp TO exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inst ::= NEW_LINE 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inst ::= READ PAR_OUVR place PAR_FERM 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inst ::= WRITE PAR_OUVR liste_exp PAR_FERM 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inst ::= IF exp THEN liste_inst ELSE liste_inst END 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inst ::= IF exp THEN liste_inst END 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inst ::= WHILE exp DO liste_inst END 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inst ::= FOR pas DO liste_inst END 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inst ::= place AFFECT exp 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inst ::= NULL 
            {
              Arbre RESULT =null;
		

   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // liste_inst ::= inst POINT_VIRGULE 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_inst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // liste_inst ::= liste_inst inst POINT_VIRGULE 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_inst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // idf ::= IDF 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idf",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const ::= idf 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const ::= CONST_ENT 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constante ::= const 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constante ::= MOINS const 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constante ::= PLUS const 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_intervalle ::= constante DOUBLE_POINT constante 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_intervalle",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= ARRAY CROCH_OUVR type_intervalle CROCH_FERM OF type 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= type_intervalle 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= idf 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // liste_idf ::= idf 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_idf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // liste_idf ::= liste_idf VIRGULE idf 
            {
              Arbre RESULT =null;
		 
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_idf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= liste_idf DEUX_POINTS type 
            {
              Arbre RESULT =null;
		
      
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // liste_decl ::= 
            {
              Arbre RESULT =null;
		
      RESULT = Arbre.creation0(Noeud.Vide, parser.numLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // liste_decl ::= liste_decl decl POINT_VIRGULE 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT = Arbre.creation2(Noeud.ListeDecl, a1, a2, a2.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre start_val = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM liste_decl BEGIN liste_inst END POINT 
            {
              Arbre RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      RESULT = Arbre.creation2(Noeud.Programme, a1, a2, pleft);
      // pleft : Numéro de ligne du mot réservé "program".
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

