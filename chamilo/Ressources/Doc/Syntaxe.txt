
                     Syntaxe hors-contexe du langage JCas
                     ------------------------------------


/* Terminaux (tokens retournés par l'analyseur lexical. */
terminal String IDF;          // Identificateur
terminal Integer CONST_ENT;   // Constante entière
terminal Float CONST_REEL;    // Constante réelle
terminal String CONST_CHAINE; // Constante chaîne

/* Mots réservés */
terminal   AND,         ARRAY,       BEGIN;
terminal   DIV,         DO,          DOWNTO;
terminal   ELSE,        END,         FOR;
terminal   IF,          MOD,         NEW_LINE;
terminal   NOT,         NULL,        OF;
terminal   OR,          PROGRAM,     READ;
terminal   THEN,        TO,          WHILE;
terminal   WRITE;

/* Opérateurs */
terminal INF, SUP, EGAL, DIFF, // "<", ">", "=", "/="
         INF_EGAL, SUP_EGAL,   // "<=", ">="
         PLUS, MOINS,          // "+", "-"
         MULT, DIV_REEL;       // "*", "/"

/* Autres terminaux */
terminal PAR_OUVR, PAR_FERM; // "(", ")"
terminal DOUBLE_POINT;       // ".."
terminal DEUX_POINTS;        // ":"
terminal VIRGULE;            // ","
terminal POINT_VIRGULE;      // ";"
terminal CROCH_OUVR;         // "["
terminal CROCH_FERM;         // "]"
terminal AFFECT;             // ":="
terminal POINT;              // "."


/*
   On définit les priorités des opérateurs
   Les priorités vont dans l'ordre croissant
   On déclare egalement l'associativité des opérateurs
   (left, right, ou nonassoc)
*/

precedence nonassoc INF, SUP, EGAL, DIFF, INF_EGAL, SUP_EGAL;
precedence left PLUS, MOINS, OR;
precedence left MULT, DIV_REEL, DIV, MOD, AND;
precedence nonassoc NOT;


/* Grammaire du langage JCas */

program ::= PROGRAM liste_decl BEGIN liste_inst END POINT
   ;

liste_decl ::= liste_decl decl POINT_VIRGULE
   |  // epsilon
   ;

decl ::= liste_idf DEUX_POINTS type
   ;

liste_idf ::= liste_idf VIRGULE idf
   |  idf
;

type ::= idf
   |  type_intervalle
   |  ARRAY CROCH_OUVR type_intervalle CROCH_FERM OF type
   ;

type_intervalle ::= constante DOUBLE_POINT constante
   ;

constante ::= PLUS const
   |  MOINS const
   |  const
   ;

const ::= CONST_ENT
   |  idf
   ;

idf ::= IDF
   ;

liste_inst ::= liste_inst inst POINT_VIRGULE
   |  inst POINT_VIRGULE
   ;

inst ::= NULL
   |  place AFFECT exp
   |  FOR pas DO liste_inst END
   |  WHILE exp DO liste_inst END
   |  IF exp THEN liste_inst END
   |  IF exp THEN liste_inst ELSE liste_inst END
   |  WRITE PAR_OUVR liste_exp PAR_FERM
   |  READ PAR_OUVR place PAR_FERM
   |  NEW_LINE
   ;

pas ::= idf AFFECT exp TO exp
   |  idf AFFECT exp DOWNTO exp
   ;

liste_exp ::= liste_exp VIRGULE exp
   |  exp
   ;

exp ::= facteur
   |  exp AND exp
   |  exp OR exp
   |  exp EGAL exp
   |  exp INF_EGAL exp
   |  exp SUP_EGAL exp
   |  exp DIFF exp
   |  exp INF exp
   |  exp SUP exp
   |  exp PLUS exp
   |  exp MOINS exp
   |  exp MULT exp
   |  exp DIV_REEL exp
   |  exp MOD exp
   |  exp DIV exp
   |  PLUS facteur
   |  MOINS facteur
   |  NOT facteur
   ;

facteur ::= CONST_ENT
   |  CONST_REEL
   |  CONST_CHAINE
   |  place
   |  PAR_OUVR exp PAR_FERM
   ;

place ::= idf
   |  place CROCH_OUVR exp CROCH_FERM
   ;

